import java.util.*;
import java.io.*;

class Attribute {

	int[] Count() throws IOException {
		Scanner input = new Scanner(new File("PlayTennis.data"));
		int numbers[] = new int[2];
		while (input.hasNextLine()) {
			String splitset = input.nextLine();
			String[] parts = splitset.split(",");
			if (parts[0].equalsIgnoreCase("Yes"))
				numbers[0]++;
			else if (parts[0].equalsIgnoreCase("No"))
				numbers[1]++;
			else
				continue;
		}
		input.close();
		return numbers;
	}

	void RelevanceAnalysis(Attribute Solution) throws IOException {
		int count[] = Solution.Count();
		int i;
		double initial = entropy(count[0] + count[1], count[0], count[1], count[0], count[1]);
		System.out.println("The initial entropy is: " + initial);
		Scanner input = new Scanner(new File("PlayTennis.data"));
		String splitset = input.nextLine();
		String[] parts = splitset.split(",");
		input.close();
		int attributenos = parts.length - 1;
		double[] infogainarray = new double[attributenos];
		for (i = 0; i < infogainarray.length; i++)
			infogainarray[i] = initial;
		for (i = 1; i <= attributenos; i++)
			infogainarray[i-1] -= CalculateInfoGain(count[0] + count[1], i);
		Arrays.sort(infogainarray);
		System.out.println("The attributes sorted according their relevance: ");
		for (i = 0; i < attributenos; i++)
			System.out.println(infogainarray[i]);
	}

	float CalculateInfoGain(int count, int AttributeNumber) throws IOException {

		Scanner input = new Scanner(new File("PlayTennis.data"));
		int i, j;

		List<String> al = new ArrayList<>();
		for (i = 0; i < count; i++) {
			String splitset = input.nextLine();
			String[] parts = splitset.split(",");
			al.add(parts[AttributeNumber]);
		}
		Set<String> hs = new HashSet<>();
		hs.addAll(al);
		al.clear();
		al.addAll(hs);

		String[] Attributes = new String[al.size()];
		Attributes = al.toArray(Attributes);
		int[][] yesno = new int[Attributes.length][2];
		input.close();
		Scanner newinput = new Scanner(new File("PlayTennis.data"));
		for (i = 0; i < count; i++) {
			String splitset = newinput.nextLine();
			String[] parts = splitset.split(",");
			for (j = 0; j < Attributes.length; j++) {
				if (parts[AttributeNumber].equalsIgnoreCase(Attributes[j]))
					if (parts[0].equalsIgnoreCase("Yes"))
						yesno[j][0]++;
					else
						yesno[j][1]++;
			}
		}

		int TotalYes = 0;
		for (i = 0; i < Attributes.length; i++) {

			TotalYes = TotalYes + yesno[i][0];

		}

		int TotalNo = 0;
		for (i = 0; i < Attributes.length; i++) {

			TotalNo = TotalNo + yesno[i][1];

		}
		newinput.close();
		float attributeentropy = 0;

		for (i = 0; i < Attributes.length; i++)
			attributeentropy += entropy(count, yesno[i][0], yesno[i][1], TotalYes, TotalNo);
		return attributeentropy;
	}

	double entropy(int count, int yes, int no, int TotalYes, int TotalNo) {
		System.out.println();

		double p1 = (double) yes / (yes + no);
		double p2 = (double) no / (yes + no);

		double yesPart = -p1 * (Math.log(p1) / Math.log(2));
		double noPart = -p2 * (Math.log(p2) / Math.log(2));

		double IGattr;
		if (Double.isNaN(yesPart) || Double.isNaN(noPart)) {
			IGattr = 0;
			return IGattr;
		}

		double OutBrkt = (double) (yes + no) / count;
		double brkts = yesPart + noPart;
		IGattr = OutBrkt * brkts;
		return IGattr;
	}

	public static void main(String[] args) throws IOException {
		Attribute Solution = new Attribute();
		Solution.RelevanceAnalysis(Solution);
	}
}
