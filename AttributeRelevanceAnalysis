import java.util.*;
import java.io.*;

class Attribute {

	int[] Count() throws IOException {
		Scanner input = new Scanner(new File("PlayTennis.data"));
		int numbers[] = new int[2];
		while (input.hasNextLine()) {
			String splitset = input.nextLine();
			String[] parts = splitset.split(",");
			if (parts[0].equalsIgnoreCase("Yes"))
				numbers[0]++;
			else if (parts[0].equalsIgnoreCase("No"))
				numbers[1]++;
			else
				continue;
		}
		input.close();
		return numbers;
	}

	double RelevanceAnalysis(Attribute Solution) throws IOException {
		int count[] = Solution.Count();
		// int count;
		// count = count[0]+count[1];
		//double initial = entropy(count[0] + count[1], count[0], count[1]);
		return (dummyfunction(count[0] + count[1], 1));
	}

	float dummyfunction(int count, int AttributeNumber) throws IOException {

		Scanner input = new Scanner(new File("PlayTennis.data"));
		int i, j;
		List<String> al = new ArrayList<>();
		for (i = 0; i < count; i++) {
			String splitset = input.nextLine();
			String[] parts = splitset.split(",");
			al.add(parts[AttributeNumber]);
		}
		Set<String> hs = new HashSet<>();
		hs.addAll(al);
		al.clear();
		al.addAll(hs);
		String[] Attributes = new String[al.size()];
		Attributes = al.toArray(Attributes);
		int[][] yesno = new int[Attributes.length][2];
		input.close();
		//for(String s: Attributes)
		//	System.out.println(s);
		Scanner newinput = new Scanner(new File("PlayTennis.data"));
		for (i = 0; i < count; i++) {
			String splitset = newinput.nextLine();
			String[] parts = splitset.split(",");
			for (j = 0; j < Attributes.length; j++) {
				if (parts[AttributeNumber].equalsIgnoreCase(Attributes[j]))
					if (parts[0].equalsIgnoreCase("Yes"))
						yesno[j][0]++;
					else
						yesno[j][1]++;

				else
					continue; // WHAT AM I EVEN DOING?!
			}
		}
		for(i=0;i<Attributes.length;i++)/*{
			for(j=0;j<2;j++)
				System.out.print(yesno[i][j]+" ");
			System.out.println();
		}	*/
		newinput.close();
		float attributeentropy = 0;
		/*for (i = 0; i < Attributes.length; i++)
			attributeentropy += entropy(count, yesno[i][0], yesno[i][1]);*/
		return attributeentropy;
	}

	double entropy(int count, int yes, int no) {
		System.out.println(yes+" "+no+" "+count);
		double p1 = (double) yes / count;
		System.out.println(p1);
		double p2 = (double) no / count;
		System.out.println(p2);
		double log1 = Math.log(p1) / Math.log(2);
		if (!Double.isFinite(log1))
			log1=0;
		double log2 = Math.log(p1) / Math.log(2);
		if (!Double.isFinite(log2))
			log2=0;
		System.out.println(log1+" "+log2);
		double entropy = (double) ((yes + no) / count)*(-p1 * log1 - p2 * log2);
		System.out.println(entropy);
		return entropy;
	}

	public static void main(String[] args) throws IOException {
		Attribute Solution = new Attribute();
		System.out.println(Solution.RelevanceAnalysis(Solution));
	}
}
